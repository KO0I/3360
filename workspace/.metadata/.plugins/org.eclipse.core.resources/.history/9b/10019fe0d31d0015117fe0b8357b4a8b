/*
   ===============================================================================
Name        : main.c

Authors     : Patrick Harrington and Marisa Martinez
Version     : 0.1
Copyright   : Copyright (C) 
Description : Lab 3 for ECEN 3000/3360
              Objective is to create a simple digital
              oscilloscope, driven exclusively by interrupts.
===============================================================================
*/
/* GPIO and GPIO Interrupt Initialization */
#include "LPC11Uxx.h"
#include "timer32.h"

#define TEN_SEC 10000
#define LED_ON  LPC_GPIO->SET[0] = (0x1<<7);
#define LED_OFF LPC_GPIO->CLR[0] = (0x1<<7);

// Global Variables
//volatile uint32_t timer32_1_counter[4] = {0,0,0,0};
volatile uint32_t duty_cycle_mode = 1; //0===25%, 1===75% time_on Cycle

volatile uint32_t tick = 0;
volatile uint32_t start_of_period = 0;
volatile uint32_t period;
volatile uint32_t time_on;
volatile uint32_t duty_cycle = 25;
volatile uint32_t duty_count;
volatile uint32_t led_en = 0;

void GPIOInit() {
  uint32_t channelNum = 1;
  // Power up the peripherals
  // Enable AHB clock to the GPIO domain.
  LPC_SYSCON->SYSAHBCLKCTRL |= (0x1<<6);
  // Enable AHB clock to the FlexInt, GroupedInt domain.
  LPC_SYSCON->SYSAHBCLKCTRL |= ((0x1<<19) | (0x1<<23) | (0x1<<24));
  
  // Set port 0 pin 7 to output
  LPC_GPIO->DIR[0] |= (0x1<<7);
  //LED_OFF;
  // Set port 0 pin 1 to input
  //LPC_GPIO->DIR[0] &=~(0x1<<1); // 0b_1111_1101
  LPC_GPIO->DIR[0] &= (0xFD); // 0b_1111_1101
  LPC_SYSCON->PINTSEL[channelNum] = 1;
  // Enable the IRQ and set priority
  NVIC_EnableIRQ(FLEX_INT1_IRQn);
  NVIC_SetPriority(FLEX_INT1_IRQn, 0);
  // Set ISEL to Edge sensitive p.156
  LPC_GPIO_PIN_INT->ISEL  &=~(0x1<<channelNum);
  // Set IENR to rising edge
  LPC_GPIO_PIN_INT->IENR  |= (0x1<<channelNum);// Rising Edge of P0_0
  // Set IENF explicity to IGNORE FALLING EDGE
  //LPC_GPIO_PIN_INT->IENF  &=~(0x1<<channelNum);
  //LPC_GPIO_PIN_INT->SIENR |= (0x1<<channelNum);
}

void TIMERInit() {
  // Enable AHB clock to the CT32B0 domain.
  // See page 31 of LPC User Manual
  LPC_SYSCON->SYSAHBCLKCTRL |= (1<<9);

  // Starting with one timer:
  // The timer CT32B0 has four match registers
  //    and two capture registers
  LPC_IOCON->PIO0_18 &= ~0x07;// I/O Config
  LPC_IOCON->PIO0_18 |=  0x02;// Timer0_32 CAP0

  //External Match Register Config

  LPC_CT32B0->EMR &= ~(0xFF<<4);//Clear EMR
  LPC_CT32B0->EMR |= ((0x3<<4)|(0x3<<6)|(0x3<<8)|(0x3<<10));	

  
  /*
  LPC_CT32B0->TCR = 0x02;// Reset the Timer
  LPC_CT32B0->PR  = 0x00;// Pre-scale
  LPC_CT32B0->IR  = 0x11;// Clears the interrupt req.
  */
  LPC_CT32B0->MR0 = SystemCoreClock/1000-1;//ticks every 1 ms
  LPC_CT32B0->TCR = 0x01;// start the timer(s)
  
  LPC_CT32B0->MCR = 0x03;// interrupt and reset on match
  
  NVIC_EnableIRQ(TIMER_32_0_IRQn);
  NVIC_SetPriority(TIMER_32_0_IRQn, 0);

  return;
}

void FLEX_INT1_IRQHandler(void) {
  //LPC_GPIO->SET[0] = (0x1<<7);
  LPC_GPIO->CLR[0] = (0x1<<7);
/*
	period = tick - start_of_period+1;
	start_of_period = tick;
	time_on = (period * duty_cycle)/100;
	// always enable the LED on rising edge
	if(!led_en)LPC_GPIO->SET[0] = (0x1<<7);
	led_en = 1;
	*/
	//duty_count = 0;
  //if(LPC_GPIO_PIN_INT->RISE & (0x1<<0)&& (LPC_GPIO_PIN_INT->IENR & (0x1<<0))){
  //  LPC_GPIO_PIN_INT->RISE = 0x1<<0;

  //}
  // clear interrupt flag
	LPC_GPIO_PIN_INT->IST = 0x1<<0;
  return;
}

void TIMER32_0_IRQHandler(void) {
	// Clear interrupt registers and increment counter
	// These handle the match events on the timer
  LPC_GPIO->SET[0] = (0x1<<7);
  tick++;
  if(tick == TEN_SEC){
	LED_OFF;
    tick = 0;
    duty_cycle      = (duty_cycle_mode)?75:25;
    duty_cycle_mode = (duty_cycle_mode)?0:1;
  }

  // if the LED is enabled
  if(led_en){
    // keep track of how long is on
    duty_count++;
    if(duty_count >= time_on){
      // turn the LED off after enough time elapses
      LPC_GPIO->CLR[0] = (0x1<<7);
      led_en = 0;
      duty_count = 0;
    }
  }
  LPC_CT32B0->IR = (0x1<<0); //reset interrupt flag
  return;
}

int main(void) {
  //SystemCoreClockUpdate();
  // Initialize GPIO ports for both Interrupts and LED control
  GPIOInit();
  // Initialize Timer and Generate a 1ms interrupt
  TIMERInit();

  while(1){
	  //if(LPC_GPIO_PIN_INT->RISE & (0x1<<0))LED_ON;
  }


  return 0;
}
